@using Entidades;
@{
    ViewBag.Title = "Asegurados";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Styles {
    @Styles.Render("~/Content/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css")
    @Styles.Render("~/Content/plugins/datatables-responsive/css/responsive.bootstrap4.min.css")
}
<style>
    .card-body {
        padding-bottom: 0.25rem !important;
    }
</style>
<div class="row">
    @Html.AntiForgeryToken()
    <div class="col-12">
        <div class="card card-primary card-outline">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-table"></i>
                    Lista de Asegurados
                </h3>
            </div>
            <div class="card-body pt-1">
                <!-- Header -->
                <div class="row">
                    <div class="mb-2 mt-1">
                        <button type="button" id="btnNuevo" class="btn btn-outline-secondary btn-sm px-4" data-dismiss="modal" data-toggle="modal" data-target="#modalEnviarAfiliado" disabled="disabled">Nuevo</button>
                        <button type="button" id="btnBuscar" class="btn btn-outline-secondary btn-sm px-4" data-dismiss="modal" data-toggle="modal" data-target="#modalBuscarAfiliado" disabled="disabled">Buscar</button>
                    </div>
                </div>
                <!-- Table -->
                <table id="dglista" class="table table-bordered table-hover table-sm">
                    <thead id="headerAsegurados">
                    </thead>
                    <tbody id="bodyAsegurados">
                        <!-- Loading -->
                        <div id="tableLoading" class="text-center">
                            <div class="spinner-grow text-primary ui-spinner" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                            <div class="spinner-grow text-primary ui-spinner" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                            <div class="spinner-grow text-primary ui-spinner" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    </tbody>
                </table>
                <!-- Pagination -->
                <nav aria-label="Page navigation example" class="pt-3">
                    <ul class="pagination justify-content-end">
                        <li class="page-item"><button class="page-link">Previous</button></li>
                        <li class="page-item"><button class="page-link">1</button></li>
                        <li class="page-item"><button class="page-link">2</button></li>
                        <li class="page-item"><button class="page-link">3</button></li>
                        <li class="page-item"><button class="page-link">Next</button></li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>
@Html.Partial("SaludAsegurados/_AfiliacionCrear", new ENSaludAsegurados())
@Html.Partial("SaludAsegurados/_AfiliacionBuscar")
@section Scripts {
    @Scripts.Render("~/Content/plugins/datatables/jquery.dataTables.min.js")
    @Scripts.Render("~/Content/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js")
    @Scripts.Render("~/Content/plugins/datatables-responsive/js/dataTables.responsive.min.js")
    @Scripts.Render("~/Content//plugins/datatables-responsive/js/responsive.bootstrap4.min.js")
    
    <script src="~/Scripts/Comandos.js"></script>
    <script>
        /// Carga un elemento <select> genérico a partir de una llamada Ajax
        const loadDropDownList = (result, selectId, optionDataField, optionDisplayField, defaultText = '-- Seleccione --') => {
            /// Combo selector
            const select = document.querySelector(`#${selectId}`);
            
            /// Default element
            const defaultOption = document.createElement('option');
            defaultOption.text = defaultText;
            defaultOption.disabled = 'disabled';
            defaultOption.selected = true;
            select.appendChild(defaultOption)

            /// Other elements
            for (const elem of result) {
                /// Creating...
                const option = document.createElement('option'); // CodigoCategoria, CodigoParentesco
                option.id = elem[optionDataField];
                option.text = elem[optionDisplayField];

                /// Inserting...
                select.appendChild(option);
            }
        }

        const fillDropDownListByAjax = (selectId, optionDataField, optionDisplayField, url, type = 'GET', data = {}, defaultText = '-- Seleccione --') => {
            $.ajax({
                type,
                url,
                data,
                datatype: 'json',
                traditional: true,
                success(result) {
                    loadDropDownList(result, selectId, optionDataField, optionDisplayField, defaultText);
                },
                error(xhr, textStatus, errorThrown) {
                    console.error(xhr);
                }
            });
        }

        const toIntDate = (strDate) => {
            try {
                return parseInt(strDate.split('(')[1].split(')')[0]);
            } catch (e) {
                return undefined;
            }
        }

        const enableButton = (buttonId, enabled) => {
            const button = document.querySelector(`#${buttonId}`);
            if (enabled) {
                button.classList.remove('btn-outline-primary');
                button.classList.add('btn-outline-secondary');
                button.attributes.setNamedItem('disabled');
            } else {
                button.classList.remove('btn-outline-secondary');
                button.classList.add('btn-outline-primary');
                button.attributes.removeNamedItem('disabled');
            }
        }

        const loadTableHeader = (tableHeaderId, fieldNameArray = [], settings = { hasEdit: false, hasDelete: false }) => {

            /// Table Header selector and row
            const tableHeader = document.querySelector(`#${tableHeaderId}`);
            const row = document.createElement('tr');
            
            /// Fill
            for (const field of fieldNameArray) {
                const col = document.createElement('td');
                col.innerText = field.key;
                row.appendChild(col);
            }

            /// Fill if it has edit or delete button
            if (settings.hasEdit || settings.hasDelete) {
                const col = document.createElement('td');
                col.innerText = '';
                col.style = "width: 15%";
                row.appendChild(col);
            }
            tableHeader.appendChild(row);

        }

        const loadTableBody = (result, tableBodyId, fieldNameArray = [], settings = { hasEdit: false, hasDelete: false }) => {
            /// Table Body selector
            const tableBody = document.querySelector(`#${tableBodyId}`);
            
            /// Default element
            for (const elem of result) {
                /// Creating row...
                const row = document.createElement('tr');

                for (const field of fieldNameArray) {
                    if (field.type === 'Date') {
                        elem[field.name] = moment(new Date(toIntDate(elem[field.name]))).format('DD/MM/YYYY');
                    } else if (field.type === 'Int') {
                        elem[field.name] = parseInt(elem[field.name]);
                    }
                    const col = document.createElement('td');
                    col.innerText = elem[field.name];
                    row.appendChild(col); /// Inserta columna en la fila
                }

                /// Adding edit or delete buttons...
                if (settings.hasEdit || settings.hasDelete) {
                    /// New column...
                    const col = document.createElement('td');
                    col.classList.add('project-actions', 'text-center');

                    /// Edit
                    if (settings.hasEdit) {
                        const editButton = document.createElement('button');
                        editButton.textContent = 'Editar';
                        editButton.classList.add('btn', 'btn-outline-info', 'btn-sm', 'mr-3');
                        col.appendChild(editButton);
                    }

                    /// Delete
                    if (settings.hasDelete) {
                        const deleteButton = document.createElement('button');
                        deleteButton.textContent = 'Eliminar';
                        deleteButton.classList.add('btn', 'btn-outline-danger', 'btn-sm');
                        col.appendChild(deleteButton);
                    }

                    /// Appending to row...
                    row.appendChild(col);
                }

                /// Inserting...
                tableBody.appendChild(row);
            }
        }

        const fillDataTableByAjax = (settings) => {

            let { tableHeaderId, tableBodyId, counting, pagination } = settings;
            
            /// Cantidad de registros
            let catchPrevious, catchNext;

            $.ajax({
                type: counting.type,
                url: counting.url,
                data: counting.data,
                dataType: 'json',
                traditional: true,
                success(result) {

                    let { totalRows } = result;
                    if (totalRows === -1) throw error('Hubo un error de conexión');
                    catchPrevious = moment();

                    /// Row Structure
                    let rowStruct = [
                        { key: 'Cliente', name: 'CodigoCliente', type: 'String' },
                        { key: 'Cod.Titular', name: 'CodigoTitular', type: 'String' },
                        { key: 'Categoría', name: 'Categoria', type: 'String' },
                        { key: 'Paterno', name: 'ApellidoPaterno', type: 'String' },
                        { key: 'Materno', name: 'ApellidoMaterno', type: 'String' },
                        { key: 'Nombres', name: 'Nombres', type: 'String' },
                        { key: 'Fecha Nac.', name: 'FechaNacimiento', type: 'Date' },
                        { key: 'TipoDoc', name: 'CodigoDocumentoIdentidad', type: 'String' },
                        { key: 'NroDoc', name: 'NumeroDocumentoIdentidad', type: 'String' },
                        { key: 'Sexo', name: 'CodigoSexo', type: 'String' },
                    ];

                    /// Llamada con paginación
                    $.ajax({
                        type: pagination.type,
                        url: pagination.url,
                        data: pagination.data,
                        datatype: 'json',
                        traditional: true,
                        success(result) {
                            catchNext = moment();
                            console.log(`Duration: ${parseInt(catchNext.diff(catchPrevious, 'milliseconds'))} ms`);

                            /// Table Header Loading
                            loadTableHeader(
                                tableHeaderId,
                                rowStruct,
                                {
                                    hasEdit: true,
                                    hasDelete: true
                                });

                            /// Table Body Loading
                            loadTableBody(
                                result,
                                tableBodyId,
                                rowStruct,
                                {
                                    hasEdit: true,
                                    hasDelete: true
                                });

                            /// Button Nuevo
                            const btnNuevo = document.querySelector('#btnNuevo');
                            btnNuevo.classList.remove('btn-outline-secondary');
                            btnNuevo.classList.add('btn-outline-primary');
                            btnNuevo.attributes.removeNamedItem('disabled');

                            /// Button Buscar
                            const btnBuscar = document.querySelector('#btnBuscar');
                            btnBuscar.classList.remove('btn-outline-secondary');
                            btnBuscar.classList.add('btn-outline-primary');
                            btnBuscar.attributes.removeNamedItem('disabled');

                            document.querySelector('#tableLoading').classList.add('d-none');
                        },
                        error(xhr, textStatus, errorThrown) {
                            console.error(xhr);
                        }
                    });

                },
                error(xhr, textStatus, errorThrown) {
                    totalRows = -1;
                    console.error(xhr);
                }
            });

        }

        /// Dropdownlist loadings...
        fillDropDownListByAjax('drpParentesco', 'CodigoCategoria', 'DescripcionParentesco', '/SCTRCotizacion/GetParentesco', 'POST'); // Parentesco
        fillDropDownListByAjax('drpVendedor', 'CodigoVendedor', 'DescripcionVendedor', '/SCTRCotizacion/GetVendedor', 'POST'); // Vendedor
        fillDropDownListByAjax('drpCentroCosto', 'CodigoCentroCosto', 'DescripcionCentroCosto', '/SCTRCotizacion/GetCentroCosto', 'POST', { codigocliente: '000494' }); // Centro de Costo
        fillDropDownListByAjax('drpDocumentoIdentidad', 'CodigoDocumentoIdentidad', 'DescripcionDocumentoIdentidad', '/SCTRCotizacion/GetDocumentoIdentidad', 'POST'); // Documento de Identidad
        fillDropDownListByAjax('drpSexo', 'CodigoSexo', 'DescripcionSexo', '/SCTRCotizacion/GetSexo', 'POST'); // Sexo

        /// DataTable loading...
        fillDataTableByAjax(
            {
                tableHeaderId: 'headerAsegurados',
                tableBodyId: 'bodyAsegurados',
                counting: {
                    url: '/SaludAsegurados/GetCantidad',
                    type: 'GET',
                    data: {
                        page: 1,
                        keywords: ''
                    }
                },
                pagination: {
                    url: '/SaludAsegurados/GetAsegurados',
                    type: 'GET',
                    data: {
                        page: 1,
                        keywords: ''
                    }
                }
            }); // Asegurados
    </script>
}
